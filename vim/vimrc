" Use Vim settings instead of Vi settings; set explicitly to make this clear.
set nocompatible

filetype plugin indent on      " Load plugins according to detected filetype
syntax enable                  " Enable syntax highlighting

set autoindent                 " Indent according to the previous line
set expandtab                  " Use spaces instead of tabs
set softtabstop=2              " Tab key indents by 2 spaces
set shiftwidth=2               " >> indents by 2 spaces
set shiftround                 " >> indents to the next multiple of 'shiftwidth'

set backspace=indent,eol,start " Make backspace work as expected in insert mode
set hidden                     " Switch between buffers without having to save first
set laststatus=2               " Always show statusline
set display=lastline           " Show as much as possible of the last line

set showmode                   " Show current mode in the statusline
set showcmd                    " Show already typed keys when more are expected

set incsearch                  " Highlight while searching with / or ?
set nohlsearch                 " No persistent highlighting of matches

set ttyfast                    " Faster redrawing
set lazyredraw                 " Only redraw when necessary

set splitbelow                 " Open new windows below the current one
set splitright                 " Open new windows to the right of the current one

set cursorline                 " Find the cursor line quickly
set wrapscan                   " Searches wrap around the end of the file
set report=0                   " Always report changed lines

colorscheme nord               " Use the Nord color theme

set number relativenumber      " Display hybrid line numbers

" Display non-printable characters
set list
set listchars=tab:Â»\ ,extends:â€º,precedes:â€¹,nbsp:Â·,trail:Â·

" Make signcolumn the same color as line number column
highlight clear SignColumn

" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#handling-backup-swap-undo-and-viminfo-files
set backup
set backupdir=$HOME/.vim/files/backup/
set backupext=-vimbackup
set backupskip=
set directory=$HOME/.vim/files/swap//
set updatecount=100
set undofile
set undodir=$HOME/.vim/files/undo/
set viminfo='100,n$HOME/.vim/files/info/viminfo

" Easier split navigation
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" Automatically resize splits on window resize
au VimResized * exe "normal! \<c-w>="

" Leader keys
let mapleader = ";"
let maplocalleader = ","

" vim-airline settings
let g:airline_powerline_fonts=1
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
let airline#extensions#coc#error_symbol = 'ðŸ’€ '
let airline#extensions#coc#warning_symbol = 'âš¡'

" rainbow
let g:rainbow_active=1

" Nerdcommenter

let g:NERDSpaceDelims = 1       " Add spaces after delimiters by default
let g:NERDCompactSexyComs = 1   " Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left' " Align line-wise comment delimiters with the left margin
let g:NERDCommentEmptyLines = 1 " Allow commenting and inverting empty lines

" Add delimiters for SBT files
let g:NERDCustomDelimiters = { 'sbt': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' } }

" FZF

" Set '$FZF_DEFAULT_COMMAND' here instead of wrapping 'fzf' via Nix
let $FZF_DEFAULT_COMMAND="fd --type f --hidden --follow"

" Set color theme for 'bat' command used in colorizing preview
let $BAT_THEME="Nord"

" Use 'bat' for fancy syntax highlighting in the preview window
let $FZF_DEFAULT_OPTS="--ansi --preview 'bat --color=always --style=header,grid --line-range :300 {}'"

" Bind 'fzf' search
nnoremap <leader>t :Files<CR>

" EasyAlign

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" EasyMotion

" Bind 2-character search to '<leader>s'
nmap s <Plug>(easymotion-s2)

" Bind n-character serach to '<leader>/'
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" Markdown

" Spellcheck Markdown files
autocmd FileType markdown setlocal spell spelllang=en_us

" Disable folding in Markdown files
let g:vim_markdown_folding_disabled=1

" LSP

" Default updatetime (4000 ms) leads to noticeable delays and a poor user
" experience
set updatetime=300

" Coc.nvim uses '$XDG_CONFIG_HOME' as a place to write data, so let's make
" sure to set it to something writable.
" https://github.com/nix-community/home-manager/issues/1308#issuecomment-793908874
let g:coc_data_home = $HOME + '/.config/coc'

" Always show the signcolumn, otherwise it shifts the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Use <c-j> and <c-k> to navigate candidates
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Show diagnostic under cursor
nmap <silent> <space><space> <Plug>(coc-diagnostic-info)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Use `K` to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim', 'help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol under the cursor and its references on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Formatting selected code
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Apply code action to the selected region
" Example: `<leader>aap` for the current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying code action to the current buffer
nmap <leader>ac <Plug>(coc-codeaction)

" Apply AutoFix to problem on the current line
nmap <leader>qf <Plug>(coc-fix-current)

" Add `:Format` command to format the current buffer
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold the current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:OR` command to organize imports for the current buffer
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
